[{"path":"/home/clinux01/Escritorio/eci35_hetprog-main/lab3/mul_array_sycl_optimized.cc", "name":"mul_array_sycl_optimized.cc", "has_active_debug_locs":false, "absName":"/home/clinux01/Escritorio/eci35_hetprog-main/lab3/mul_array_sycl_optimized.cc", "content":"#include <iostream>\u000A#include <random>\u000A#include <vector>\u000A\u000A#include <CL/sycl.hpp>\u000A\u000Ausing namespace sycl;\u000A\u000Anamespace {\u000A  constexpr size_t n = 1024;\u000A};\u000A\u000Aclass optimized;\u000A\u000Aint main()\u000A{\u000A    std::vector<float> A, res(1);\u000A\u000A    A.reserve(n);\u000A\u000A    std::random_device rd;\u000A    std::mt19937 gen(rd());\u000A    std::uniform_real_distribution<float> dis(0.0f, 0.25f);\u000A\u000A    float value = dis(gen);\u000A    A.push_back(value);\u000A\u000A    for(size_t i = 1; i < n; ++i) {\u000A	A.push_back(A[0] + static_cast<float>(i)/static_cast<float>(n));\u000A    }\u000A\u000A\u000A    queue q;\u000A    // please complete\u000A    {\u000A      buffer bufA{A}, bufRes{res};\u000A\u000A      q.submit([&](handler &cgh) {\u000A        accessor a_a(bufA, cgh, read_only);\u000A        accessor res_a(bufRes, cgh, write_only);\u000A\u000A        cgh.single_task<class naive>([=](){\u000A          \u000A          const int M = 5;\u000A          float mul = 1.0f;\u000A          float mul_copies[M] = {1.0f};\u000A          \u000A          for(size_t i = 0; i < n; ++i) {\u000A            auto cur = mul_copies[M-1] * a_a[i];\u000A            // shift values in register\u000A            #pragma unroll\u000A            for(size_t j = M-1; j > 0; --j) {\u000A              mul_copies[j]=mul_copies[j-1];\u000A            }\u000A          // store value in lowest position\u000A          mul_copies[0] = cur;\u000A          }\u000A          // final reduction\u000A          #pragma unroll\u000A          for (int i = 0; i < M; ++i) {\u000A          mul *= mul_copies[i];\u000A          }\u000A\u000A          res_a[0] = mul;\u000A        });\u000A      });\u000A\u000A    }\u000A\u000A    std::cout << \"res[0] = \" << res[0] << std::endl;\u000A}\u000A"}, {"path":"/media/libre/oneapi/tbb/2021.6.0/include/tbb/tbb.h", "name":"tbb.h", "has_active_debug_locs":false, "absName":"/media/libre/oneapi/tbb/2021.6.0/include/tbb/tbb.h", "content":"/*\u000A    Copyright (c) 2005-2021 Intel Corporation\u000A\u000A    Licensed under the Apache License, Version 2.0 (the \"License\");\u000A    you may not use this file except in compliance with the License.\u000A    You may obtain a copy of the License at\u000A\u000A        http://www.apache.org/licenses/LICENSE-2.0\u000A\u000A    Unless required by applicable law or agreed to in writing, software\u000A    distributed under the License is distributed on an \"AS IS\" BASIS,\u000A    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\u000A    See the License for the specific language governing permissions and\u000A    limitations under the License.\u000A*/\u000A\u000A#include \"../oneapi/tbb.h\"\u000A"}]